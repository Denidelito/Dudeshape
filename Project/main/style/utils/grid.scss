@import "./mixins/_grid-mixins";
@import "./mixins/_visibility-mixins";
@import "./variables";

.row {
  @include row();
}

.row.reverse {
  @include row-reverse();
}

.row.natural-height {
  @include row-natural-height();
}

.row.flex-column {
  @include row-flex-column();
}

.col {
  @include col();
}

.col.reverse {
  @include col-reverse();
}

.first {
  order: -1;
}

.last {
  order: 1;
}

.flex {
    display: flex;

  @media #{$breakpoint-lg-only} {
    &-lg {
      display: flex;
    }
  }

  @media #{$breakpoint-xs-only} {
    &-xs {
      display: flex;
    }
  }

}


.align-start {
  align-self: flex-start;
}

.align-end {
  align-self: flex-end;
}

.align-center {
  align-self: center;
}

.align-baseline {
  align-self: baseline;
}

.align-stretch {
  align-self: stretch;
}

.flex-grow {
  flex-grow: 1;
}
.start {
  justify-content: flex-start;
}

.center {
  justify-content: center;
}

.end {
  justify-content: flex-end;
}

.top {
  align-items: flex-start;
}

.middle {
  align-items: center;
}

.bottom {
  align-items: flex-end;
}

.around {
  justify-content: space-around;
}

.between {
  justify-content: space-between;
}


@mixin col-factory-all($thisPrefix) {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      box-sizing: border-box;
      flex-basis: calc(100% / $grid-columns-xs) * $i;
      max-width: calc(100% / $grid-columns-xs) * $i;
      padding: $gutter-lg;

      @media screen and (max-width: 719px) {
        padding: $gutter-xs;
      }
    }

    .col-offset-#{$i} {
      margin-left: calc(100% / $grid-columns-xs) * $i;
    }
  }
}

@mixin col-factory-xs($thisPrefix-xs) {
  @for $i from 1 through $grid-columns-xs {
    .col-#{$thisPrefix-xs}-#{$i} {
      box-sizing: border-box;
      flex-basis: calc(100% / $grid-columns-xs) * $i;
      max-width: calc(100% / $grid-columns-xs) * $i;
      padding: $gutter-xs;
		}

    .col-#{$thisPrefix-xs}-offset-#{$i} {
      margin-left: calc(100% / $grid-columns-xs) * $i;
    }
  }
}

@mixin col-factory-lg($thisPrefix-lg) {
  @for $i from 1 through $grid-columns-lg {
    .col-#{$thisPrefix-lg}-#{$i} {
      box-sizing: border-box;
      flex-basis: calc(100% / $grid-columns-lg) * $i;
      max-width: calc(100% / $grid-columns-lg) * $i;
      padding: $gutter-lg;
		}

    .col-#{$thisPrefix-lg}-offset-#{$i} {
      margin-left: calc(100% / $grid-columns-lg) * $i;
    }
  }
}

@mixin col-factory($thisPrefix) {
  @for $i from 1 through $grid-columns {
    .order-#{$thisPrefix}-#{$i} {
      order: #{$i};
    }
  }

  .row.start-#{$thisPrefix} {
    justify-content: flex-start;
  }

  .row.center-#{$thisPrefix} {
    justify-content: center;
  }

  .row.end-#{$thisPrefix} {
    justify-content: flex-end;
  }

  .row.top-#{$thisPrefix} {
    align-items: flex-start;
  }

  .row.middle-#{$thisPrefix} {
    align-items: center;
  }

  .row.bottom-#{$thisPrefix} {
    align-items: flex-end;
  }

  .row.around-#{$thisPrefix} {
    justify-content: space-around;
  }

  .row.between-#{$thisPrefix} {
    justify-content: space-between;
  }

  .first-#{$thisPrefix} {
    order: -1;
  }

  .last-#{$thisPrefix} {
    order: 1;
  }
}

@for $i from 1 through length($breakpoint-up-prefixes) {
  $thisPrefix: nth($breakpoint-up-prefixes, $i);
  $thisPrefix-xs: "xs";
  $thisPrefix-lg: "lg";

  @if $thisPrefix== "xs" {
    @include col-factory-all($thisPrefix);

    @media #{$breakpoint-xs-only} {
      @include col-factory-xs($thisPrefix-xs);
      @include col-factory($thisPrefix);
    }
  } @else if $thisPrefix== "lg" {
    @media #{$breakpoint-lg-only} {
      @include col-factory-lg($thisPrefix-lg);
      @include col-factory($thisPrefix);
    }
  }
}

.col-gutter-lr {
  padding: 0 $gutter;
}

.col-no-gutter {
  padding: 0;
}
